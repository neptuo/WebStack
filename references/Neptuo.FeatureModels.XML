<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neptuo.FeatureModels</name>
    </assembly>
    <members>
        <member name="T:Neptuo.FeatureModels.MappingFeatureModel">
            <summary>
            Implementation of <see cref="T:Neptuo.FeatureModels.IFeatureModel"/> which delegates features to registered objects (with concurrent support.).
            </summary>
        </member>
        <member name="T:Neptuo.FeatureModels.IFeatureModel">
            <summary>
            Describes extensible model.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.IFeatureModel.TryWith``1(``0@)">
            <summary>
            Tries to retrieve object of type <typeparamref name="TFeature"/>.
            If this is possible, returns <c>true</c>; otherwise <c>false</c>.
            </summary>
            <typeparam name="TFeature">Type of feature to retrieve.</typeparam>
            <param name="feature">Output instance of feature; <c>null</c> if not supported.</param>
            <returns><c>true</c> if feature of type <typeparamref name="TFeature"/> is supported; otherwise <c>false</c>.</returns>
        </member>
        <member name="F:Neptuo.FeatureModels.MappingFeatureModel.onSearchFeature">
            <summary>
            Invoked when feature was not found.
            Takes typeof requested feture, should return <c>true</c> to indicate success; otherwise <c>false</c>.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.MappingFeatureModel.AddSearchHandler(Neptuo.OutFunc{System.Type,System.Boolean,System.Object})">
            <summary>
            Registers generic handler for providing feature.
            <paramref name="handler"/> takes typeof requested feature 
            and returns <c>true</c> to indicate success; otherwise <c>false</c>.
            </summary>
            <param name="handler">Handler to register.</param>
        </member>
        <member name="T:Neptuo.FeatureModels.ObjectFeatureModel">
            <summary>
            Implementation of <see cref="T:Neptuo.FeatureModels.IFeatureModel"/> which tries type casting to retrive requested feature.
            </summary>
        </member>
        <member name="M:Neptuo.FeatureModels.ObjectFeatureModel.#ctor(System.Object)">
            <summary>
            Creates feature model for object <paramref name="instance"/>.
            </summary>
            <param name="instance">Object instance to retrieve feature from.</param>
        </member>
        <member name="M:Neptuo.FeatureModels._FeatureModelExtensions.With``1(Neptuo.FeatureModels.IFeatureModel)">
            <summary>
            Tries to retrieve object of type <typeparamref name="TFeature"/>.
            If this is not possible, throws <see cref="T:System.NotSupportedException"/>/
            </summary>
            <typeparam name="TFeature">Type of feature to retrieve.</typeparam>
            <param name="model">Feature model.</param>
            <returns>Feature of type <typeparamref name="TFeature"/>.</returns>
            <exception cref="T:System.NotSupportedException">If <paramref name="model"/> doesn't support feature of type <typeparamref name="TFeature"/>.</exception>
        </member>
    </members>
</doc>
